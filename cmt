# from sqlalchemy import BigInteger, Column, Text, create_engine
# from sqlalchemy.ext.declarative import declarative_base
# from sqlalchemy.orm import sessionmaker
# import sys

# # ========== Model ==========
# Base = declarative_base()

# class Person(Base):
#     """SQLAlchemy model for the 'person' table."""
#     __tablename__ = "person"

#     id = Column(BigInteger, primary_key=True, autoincrement=True)
#     name = Column(Text, nullable=False)
#     age = Column(BigInteger, nullable=True)

# from sqlalchemy.engine.url import URL

# DATABASE_URL = URL.create(
#     drivername="postgresql",
#     username="postgres",
#     password="nick",
#     host="localhost",
#     port=5432,
#     database="postgres"
# )

# # DATABASE_URL = "sqlite:///example.db"
# engine = create_engine(DATABASE_URL, echo=False)
# SessionLocal = sessionmaker(bind=engine)
# Base.metadata.create_all(engine)

# # ========== Controller ==========
# class PersonController:
    
#     def __init__(self):
#         self.session = SessionLocal()

#     def add_person(self, name, age):
#         new_person = Person(name=name, age=age)
#         self.session.add(new_person)
#         self.session.commit()
#         print(f"‚úÖ Added {name}, Age: {age}, ID: {new_person.id}")

#     def list_people(self):
#         people = self.session.query(Person).all()
#         if not people:
#             print("üì≠ No people found.")
#         else:
#             print("\nüë• People in Database:")
#             for person in people:
#                 print(f"üîπ ID: {person.id}, Name: {person.name}, Age: {person.age}")

#     def delete_person(self, person_id):
#         person = self.session.query(Person).filter_by(id=person_id).first()
#         if person:
#             self.session.delete(person)
#             self.session.commit()
#             print(f"üóëÔ∏è Deleted {person.name} (ID: {person_id})")
#         else:
#             print(f"‚ö†Ô∏è No person found with ID: {person_id}")

# # ========== View (CLI) ==========
# class PersonView:
#     """Command-line interface (CLI) for user interaction."""

#     def __init__(self, controller):
#         self.controller = controller

#     def display_menu(self):
#         """Displays menu options."""
#         while True:
#             print("\n=== Person Manager ===")
#             print("1Ô∏è‚É£  Add a Person")
#             print("2Ô∏è‚É£  List All People")
#             print("3Ô∏è‚É£  Delete a Person")
#             print("4Ô∏è‚É£  Exit")

#             choice = input("Enter choice: ").strip()
            
#             if choice == "1":
#                 name = input("Enter name: ").strip()
#                 age = input("Enter age: ").strip()
#                 if age.isdigit():
#                     self.controller.add_person(name, int(age))
#                 else:
#                     print("‚ö†Ô∏è Invalid age, please enter a number.")

#             elif choice == "2":
#                 self.controller.list_people()

#             elif choice == "3":
#                 person_id = input("Enter person ID to delete: ").strip()
#                 if person_id.isdigit():
#                     self.controller.delete_person(int(person_id))
#                 else:
#                     print("‚ö†Ô∏è Invalid ID, please enter a number.")

#             elif choice == "4":
#                 print("üëã Exiting...")
#                 sys.exit(0)

#             else:
#                 print("‚ö†Ô∏è Invalid choice, please select a valid option.")

# # ========== Run Application ==========
# if __name__ == "__main__":
#     controller = PersonController()
#     view = PersonView(controller)
#     view.display_menu()
